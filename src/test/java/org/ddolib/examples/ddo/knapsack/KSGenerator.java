package org.ddolib.examples.ddo.knapsack;

import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Random;

/**
 * Generate Knapsack instances with known optimal solutions.
 * The instances are generated by creating random items and ensuring that the top 3 items
 * by value/weight ratio fit exactly into the knapsack, making them the optimal solution.
 */
public class KSGenerator {

    public static void main(String[] args) {

        String outputDir = "data/Knapsack";
        for (int i = 0; i < 100; i++) {
            generateInstance(outputDir,i);
        }
    }

    public static void generateInstance(String outputDir, int id) {
        Random random = new Random();
        int nItems = 10;// + random.nextInt(11); // 10-20 items
        List<Item> items = new ArrayList<>();

        // Generate random items
        for (int i = 0; i < nItems; i++) {
            int value = 1 + random.nextInt(100); // value: 1-100
            int weight = 1 + random.nextInt(50); // weight: 1-50
            items.add(new Item(value, weight));
        }

        // Sort by value/weight ratio (descending)
        items.sort(Comparator.comparingDouble(Item::ratio).reversed());

        // Select top 3 items for the optimal solution
        Item item1 = items.get(0);
        Item item2 = items.get(1);
        Item item3 = items.get(2);

        // Knapsack capacity = sum of weights of top 3 items
        int capacity = item1.weight + item2.weight + item3.weight;
        int optimalValue = item1.value + item2.value + item3.value;

        // shuffle items to avoid ordered input
        java.util.Collections.shuffle(items);

        // Write to file
        String filename = outputDir + String.format("/knapsack_%ditems_%d.txt",nItems,id);
        try (FileWriter writer = new FileWriter(filename)) {
            writer.write(nItems + " " + capacity + " " + optimalValue + "\n");
            for (Item item : items) {
                writer.write(item.value + " " + item.weight + "\n");
            }
            System.out.println("Generated: " + filename);
            System.out.println("Optimal solution: items 1, 2, 3 (0-based or as per file order)");
        } catch (IOException e) {
            System.err.println("Error writing file: " + e.getMessage());
        }
    }

    static record Item(int value, int weight) {
        double ratio() {
            return (double) value / weight;
        }
    }
}

